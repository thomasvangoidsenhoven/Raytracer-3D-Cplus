#include "random-sampler.h"
#include <random>
using namespace std;
using namespace raytracer;

vector<Point2D> raytracer::samplers::RandomSampler::sample(const math::Rectangle2D & rectangle) const
{
	vector<Point2D> output = vector<Point2D>();
	//https://en.cppreference.com/w/cpp/numeric/random/uniform_real_distribution
	//copy pasta
	random_device rd;  //Will be used to obtain a seed for the random number engine
	mt19937 gen(rd()); //Standard mersenne_twister_engine seeded with rd()
	uniform_real_distribution<> dis(0.0, 1.0);
	for (int n = 0; n < m_sample_count; n++) {
		// Use dis to transform the random unsigned int generated by gen into a 
		// double in [1, 2). Each call to dis(gen) generates a new random double
		double  x = dis(gen);
		double y = dis(gen);
		output.push_back(rectangle.from_relative(Point2D(x, y)));
	}
	
	return output;
}

Sampler raytracer::samplers::random(int m_sample_count)
{
	return Sampler(make_shared<RandomSampler>(m_sample_count));
}
